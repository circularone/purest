<?php

/**
 * @file
 * Contains purest_user.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_help().
 */
function purest_user_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the purest_user module.
    case 'help.page.purest_user':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for handling REST operations on User entities.') . '</p>';
      $output .= '<h3>' . t('Register Resource') . '</h3>';
      $output .= '<p>' . t('Allows users to register via REST providing username, email address and password.') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Allowed methods: POST') . '</li>';
      $output .= '<li>' . t('Content type: application/json') . '</li>';
      $output .= '<li>' . t('Body format:') . '</li>';
      $output .= '</ul>';
      $output .= '
      <pre>
        <code>
          {
            "name": {
              "value": "test"
            },
            "mail": {
              "value": "email@domain.com"
            },
            "pass": {
              "value": "password"
            }
          }
        </code>
      </pre>';
      return $output;
    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function purest_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_admin_settings') {
    $config_factory = \Drupal::configFactory();

    $mail_config = $config_factory->getEditable('user.mail');
    $copy = $mail_config->get('verify_email_copy');

    if (!empty($copy)) {
      $form['verify_email_copy'] = [
        '#type' => 'details',
        '#title' => t('Purest Verify Email Address'),
        '#description' => t('Edit the email message sent to users who register via Rest endpoint.'),
        '#group' => 'email',
        '#weight' => 10,
      ];

      $form['verify_email_copy']['verify_email_subject'] = [
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#default_value' => $mail_config->get('verify_email_copy.subject'),
        '#maxlength' => 180,
      ];

      $form['verify_email_copy']['verify_email_body'] = [
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => $mail_config->get('verify_email_copy.body'),
        '#rows' => 12,
        '#description' => t('[purest:user_activation_url] is a custom token for this email only. It will return a fully formed account activation URL.'),
      ];

      $form['#submit'][] = 'purest_user_settings_form_submit';
    }

    $copy = $mail_config->get('change_password_email_copy');

    if (!empty($copy)) {
      $form['change_password_email_copy'] = [
        '#type' => 'details',
        '#title' => t('Purest Change Password Link'),
        '#description' => t('Edit the email message sent to users who register via Rest endpoint.'),
        '#group' => 'email',
        '#weight' => 10,
      ];

      $form['change_password_email_copy']['change_password_email_subject'] = [
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#default_value' => $mail_config->get('change_password_email_copy.subject'),
        '#maxlength' => 180,
      ];

      $form['change_password_email_copy']['change_password_email_body'] = [
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => $mail_config->get('change_password_email_copy.body'),
        '#rows' => 12,
        '#description' => t('[purest:password_reset_url] is a custom token for this email only. It will return a fully formed password reset URL.'),
      ];

      $form['#submit'][] = 'purest_user_settings_form_submit';
    }

    $copy = $mail_config->get('password_changed_email_copy');

    if (!empty($copy)) {
      $form['password_changed_email_copy'] = [
        '#type' => 'details',
        '#title' => t('Purest Password Changed'),
        '#description' => t('Edit the email message sent to users who changed their password via Purest Rest resource.'),
        '#group' => 'email',
        '#weight' => 10,
      ];

      $form['password_changed_email_copy']['password_changed_email_subject'] = [
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#default_value' => $mail_config->get('password_changed_email_copy.subject'),
        '#maxlength' => 180,
      ];

      $form['password_changed_email_copy']['password_changed_email_body'] = [
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => $mail_config->get('password_changed_email_copy.body'),
        '#rows' => 12,
      ];

      $form['#submit'][] = 'purest_user_settings_form_submit';
    }
  }
}

/**
 * Implements hook_form_submit().
 */
function purest_user_settings_form_submit(array &$form, FormStateInterface $form_state) {
  // Save configs.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('user.mail');

  $config->set('verify_email_copy.subject', $form_state->getValue('verify_email_subject'));
  $config->set('verify_email_copy.body', $form_state->getValue('verify_email_body'));
  $config->set('change_password_email_copy.subject', $form_state->getValue('change_password_email_subject'));
  $config->set('change_password_email_copy.body', $form_state->getValue('change_password_email'));
  $config->save(TRUE);
}

/**
 * Implements hook_mail().
 */
function purest_user_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();

  switch ($key) {
    case 'verify_email_copy':
      $account_validator = \Drupal::service('purest_user.validation');

      $langcode = $message['langcode'];
      $variables = ['user' => $params['account']];

      $language = $language_manager->getLanguage($params['account']->getPreferredLangcode());
      $original_language = $language_manager->getConfigOverrideLanguage();
      $language_manager->setConfigOverrideLanguage($language);

      $mail_config = \Drupal::config('user.mail');
      $token_options = [
        'langcode' => $langcode,
        'callback' => [
          $account_validator,
          'token'
        ], 
        'clear' => TRUE
      ];

      $message['subject'] .= PlainTextOutput::renderFromHtml(
        $token_service->replace(
          $mail_config->get($key . '.subject'),
          $variables,
          $token_options
        )
      );

      $message['body'][] = Markup::create(
        $token_service->replace(
          $mail_config->get($key . '.body'),
          $variables,
          $token_options
        )
      );
      
      $language_manager->setConfigOverrideLanguage($original_language);
      break;

    case 'change_password_email_copy':
      $password_change = \Drupal::service('purest_user.reset');

      $langcode = $message['langcode'];
      $variables = ['user' => $params['account']];

      $language = $language_manager->getLanguage($params['account']->getPreferredLangcode());
      $original_language = $language_manager->getConfigOverrideLanguage();
      $language_manager->setConfigOverrideLanguage($language);

      $mail_config = \Drupal::config('user.mail');
      $token_options = [
        'langcode' => $langcode,
        'callback' => [
          $password_change,
          'token'
        ], 
        'clear' => TRUE
      ];

      $message['subject'] .= PlainTextOutput::renderFromHtml(
        $token_service->replace(
          $mail_config->get($key . '.subject'),
          $variables,
          $token_options
        )
      );

      $message['body'][] = Markup::create(
        $token_service->replace(
          $mail_config->get($key . '.body'),
          $variables,
          $token_options
        )
      );
      
      $language_manager->setConfigOverrideLanguage($original_language);
      break;


    case 'password_changed_email_copy':
      $password_change = \Drupal::service('purest_user.reset');

      $langcode = $message['langcode'];
      $variables = ['user' => $params['account']];

      $language = $language_manager->getLanguage($params['account']->getPreferredLangcode());
      $original_language = $language_manager->getConfigOverrideLanguage();
      $language_manager->setConfigOverrideLanguage($language);

      $mail_config = \Drupal::config('user.mail');
      $token_options = [
        'langcode' => $langcode,
        'callback' => [
          $password_change,
          'token'
        ], 
        'clear' => TRUE
      ];

      $message['subject'] .= PlainTextOutput::renderFromHtml(
        $token_service->replace(
          $mail_config->get($key . '.subject'),
          $variables,
          $token_options
        )
      );

      $message['body'][] = Markup::create(
        $token_service->replace(
          $mail_config->get($key . '.body'),
          $variables,
          $token_options
        )
      );
      
      $language_manager->setConfigOverrideLanguage($original_language);
      break;
  }

}
